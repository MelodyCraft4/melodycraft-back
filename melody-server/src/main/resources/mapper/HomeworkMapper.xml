<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="com.melody.mapper.HomeworkMapper">

    <!-- 主键回显   -->
    <insert id="insertHomework" parameterType="com.melody.entity.Homework" useGeneratedKeys="true" keyProperty="id">
  insert into homework (title, content,prompt,imgUrls,videoUrls,deadline,classId,createTime,updateTime,updateUser,createUser)
    values(#{title},#{content},#{prompt},#{imgUrls},#{videoUrls},#{deadline},#{classId},#{createTime},#{updateTime},#{updateUser},#{createUser})
    </insert>

    <insert id="insertClassHomework">
            INSERT INTO class_homework (studentId, homeworkId)
            VALUES
            <foreach collection="studentIdList" item="studentId" separator=",">
                (#{studentId}, #{homeworkId})
            </foreach>
    </insert>

    <insert id="giveClassHomework">
        INSERT INTO class_homework (studentId, homeworkId)
        VALUES
        <foreach collection="homeworkList" item="homework" separator=",">
            (#{studentId}, #{homework.id})
        </foreach>
    </insert>

    <select id="queryFromStuByHomeworkIdList" parameterType="com.melody.vo.StuClassHomeworkVO" resultType="com.melody.vo.StuClassHomeworkVO">
        SELECT id ,homeworkId ,completed ,grade FROM class_homework
        WHERE homeWorkId IN
        <foreach collection="stuClassHomeworkVOList" item="stuClassHomeworkVO" open="(" separator="," close=")">
            #{stuClassHomeworkVO.homeworkId}
        </foreach>
        AND studentId = #{studentId}
    </select>

<!--    <update id="updateFromStu" parameterType="com.melody.entity.ClassHomework">-->
<!--        UPDATE class_homework-->
<!--        <set>-->
<!--            <if test="videoUrl != null"> videoUrl = #{videoUrl},</if>-->
<!--            <if test="commitTime != null"> commitTime = #{commitTime},</if>-->
<!--            <if test="completed != null"> completed = #{completed},</if>-->
<!--        </set>-->
<!--        WHERE id = #{id}-->
<!--    </update>-->

    <update id="update" parameterType="com.melody.entity.ClassHomework">

        UPDATE class_homework
        <set>
            <if test="grade != null"> grade = #{grade},</if>
            <if test="commitTime != null"> commitTime = #{commitTime},</if>
            <if test="completed != null"> completed = #{completed},</if>
            <if test="grade != null"> grade = #{grade},</if>
            <if test="videoUrl != null"> videoUrl = #{videoUrl},</if>
            <if test="score != null"> score = #{score},</if>
            <if test="judgement != null"> judgement = #{judgement},</if>
            <if test="judgementTime != null"> judgementTime = #{judgementTime},</if>
        </set>
        WHERE id = #{id}
    </update>


      <select id="queryClassStudentRank" resultType="com.melody.vo.ClassRankingMemberVO">
          select s.id as studentId,s.name studentName,s.iconUrl iconUrl, h.classId classId, sum(ch.score) total from class_homework ch join student
          s on s.id=ch.studentId  join homework h on h.id= ch.homeWorkId where h.classId = #{classId}
          group by s.id ;
      </select>

    <select id="queryClassRankingMemberVOByClassHomeworkIdAndStudentId" resultType="com.melody.vo.ClassRankingMemberVO">
        select s.id as studentId,s.name studentName,s.iconUrl iconUrl, h.classId classId, sum(ch.score) total from class_homework ch join student
        s on s.id=ch.studentId  join homework h on h.id= ch.homeWorkId where h.classId = #{classId}
        and s.id=(select studentId from class_homework where id=#{classhomeworkId})
        group by s.id ;
    </select>

    <delete id="deleteStudentHomeworkByIds">
        delete from class_homework WHERE studentId = #{studentId}
        AND homeworkId IN
        <foreach collection="homeworkIds" item="homeworkId" open="(" separator="," close=")">
        #{homeworkId}
    </foreach>
    </delete>


</mapper>